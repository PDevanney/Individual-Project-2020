import networkx as nx
import matplotlib.pyplot as plt

from src.initial_locations import optimal_tower_location
from src.tower import *
from src.target import *
from src.movement import find_optimal_node

target_test_graph = nx.Graph()

target_test_graph.add_nodes_from([1, 10])
target_test_graph.add_node(100)

target_test_graph.add_edges_from([(1, 2), (2, 3), (3, 4), (4, 5), (3, 100), (6, 7), (7, 100), (100, 8), (8, 9), (9, 10)])

# Draw Graph
plt.subplot(111)
nx.draw_networkx(target_test_graph, with_labels=True, font_weight='bold')
plt.show()

tower = OptimalTower
print(find_optimal_node(target_test_graph, [100]))


tower_test_graph = nx.path_graph(6)

# Draw Graph
plt.subplot(111)
nx.draw_networkx(tower_test_graph, with_labels=True, font_weight='bold')
plt.show()

print(optimal_tower_location(tower_test_graph, 1))



possible_nodes = []

possible_nodes = [x for x in possible_nodes if x != []]

if len(possible_nodes) == 0:
    print("OK 2")

if len(possible_nodes) == 1:
    print("OK 3")


target = OptimalTarget

print(target.__name__)